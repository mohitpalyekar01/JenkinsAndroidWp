apply plugin: 'com.android.application'

int MILLIS_IN_MINUTE = 1000 * 60
int minutesSinceEpoch = System.currentTimeMillis() / MILLIS_IN_MINUTE

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.test.jenkins"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"



    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    flavorDimensions("app","environment")


    productFlavors {
        customer {

            dimension "app"
          //  versionNameSuffix "-customer"
          //  applicationIdSuffix '.customer'
            minSdkVersion 15
            targetSdkVersion 26
            ext {
                development = "customer.development.url"
                production = "customer.production.url"
            }


        }

        driver {
            dimension "app"
           // versionNameSuffix "-driver"
           // applicationIdSuffix '.driver'
            minSdkVersion 15
            targetSdkVersion 26

            ext {
                development = "driver.development.url"
                production = "driver.production.url"
            }


        }


        development{
            dimension "environment"
           // applicationIdSuffix '.dev'

        }


        production{
            dimension "environment"
          //  applicationIdSuffix '.prod'
        }

        applicationVariants.all { variant ->
            def flavors = variant.productFlavors
            // flavorDimensions "app" -> 0, "environment" -> 1
            def app = flavors[0]
            def environment = flavors[1]

            variant.buildConfigField "String", "URL", "\"${app[environment.name]}\""
        }

        // The defaultConfig values above are fixed, so your incremental builds don't
        // need to rebuild the manifest (and therefore the whole APK, slowing build times).
        // But for release builds, it's okay. So the following script iterates through
        // all the known variants, finds those that are "release" build types, and
        // changes those properties to something dynamic.
        applicationVariants.all { variant ->
            if (variant.buildType.name == "release") {
                variant.mergedFlavor.versionCode = minutesSinceEpoch;
                variant.mergedFlavor.versionName = minutesSinceEpoch + "-" + variant.flavorName;
            }
        }
    }


    }







dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}
